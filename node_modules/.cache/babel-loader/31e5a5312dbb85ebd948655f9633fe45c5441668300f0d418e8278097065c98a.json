{"ast":null,"code":"import e from \"@firebase/app\";\nimport \"@firebase/logger\";\nimport \"@firebase/util\";\nimport \"@firebase/webchannel-wrapper\";\nimport \"tslib\";\nimport { U as r, Z as t, q as a, n as i, z as o, L as s, j as n, W as p, G as c, Y as m, a as f, X as u, e as b, b as l, i as g, r as d, K as h, c as v } from \"./prebuilt-30db9a88-9b75cc8d.js\";\nimport { Component as w } from \"@firebase/component\";\nvar I = {\n  Firestore: r,\n  GeoPoint: i,\n  Timestamp: o,\n  Blob: s,\n  Transaction: n,\n  WriteBatch: p,\n  DocumentReference: c,\n  DocumentSnapshot: m,\n  Query: f,\n  QueryDocumentSnapshot: u,\n  QuerySnapshot: b,\n  CollectionReference: l,\n  FieldPath: g,\n  FieldValue: d,\n  setLogLevel: h,\n  CACHE_SIZE_UNLIMITED: v\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Registers the main Firestore build with the components framework.\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\n */\nfunction P(e) {\n  !\n  /**\n  * Configures Firestore as part of the Firebase SDK by calling registerService.\n  *\n  * @param firebase - The FirebaseNamespace to register Firestore with\n  * @param firestoreFactory - A factory function that returns a new Firestore\n  *    instance.\n  */\n  function (e, r) {\n    e.INTERNAL.registerComponent(new w(\"firestore\", function (e) {\n      var t = e.getProvider(\"app\").getImmediate();\n      return r(t, e.getProvider(\"auth-internal\"));\n    }, \"PUBLIC\" /* PUBLIC */).setServiceProps(Object.assign({}, I)));\n  }(e, function (e, i) {\n    return new r(e, new t(e, i), new a());\n  }), e.registerVersion(\"@firebase/firestore\", \"2.1.2\");\n}\nP(e);\nexport { P as registerFirestore };","map":{"version":3,"names":["I","r","i","o","s","n","p","c","m","f","u","b","l","g","d","h","v","P","e","INTERNAL","registerComponent","w","t","getProvider","getImmediate","setServiceProps","Object","assign","a","registerVersion"],"sources":["F:\\React Project\\movieverse\\node_modules\\@firebase\\firestore\\src\\config.ts","F:\\React Project\\movieverse\\node_modules\\@firebase\\firestore\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Component, ComponentType, Provider } from '@firebase/component';\n\nimport {\n  CACHE_SIZE_UNLIMITED,\n  CollectionReference,\n  DocumentReference,\n  DocumentSnapshot,\n  Firestore,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  Transaction,\n  WriteBatch,\n  setLogLevel,\n  Blob,\n  FieldPath,\n  GeoPoint,\n  Timestamp,\n  FieldValue\n} from '../export';\n\nconst firestoreNamespace = {\n  Firestore,\n  GeoPoint,\n  Timestamp,\n  Blob,\n  Transaction,\n  WriteBatch,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  CollectionReference,\n  FieldPath,\n  FieldValue,\n  setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n *\n * @param firebase - The FirebaseNamespace to register Firestore with\n * @param firestoreFactory - A factory function that returns a new Firestore\n *    instance.\n */\nexport function configureForFirebase(\n  firebase: FirebaseNamespace,\n  firestoreFactory: (\n    app: FirebaseApp,\n    auth: Provider<FirebaseAuthInternalName>\n  ) => Firestore\n): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'firestore',\n      container => {\n        const app = container.getProvider('app').getImmediate()!;\n        return firestoreFactory(app, container.getProvider('auth-internal'));\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({ ...firestoreNamespace })\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\n\nimport {\n  Firestore,\n  IndexedDbPersistenceProvider,\n  ExpFirebaseFirestore\n} from './export';\nimport { name, version } from './package.json';\nimport { configureForFirebase } from './src/config';\n\nimport './register-module';\n\n/**\n * Registers the main Firestore build with the components framework.\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\n */\nexport function registerFirestore(instance: FirebaseNamespace): void {\n  configureForFirebase(\n    instance,\n    (app, auth) =>\n      new Firestore(\n        app,\n        new ExpFirebaseFirestore(app, auth),\n        new IndexedDbPersistenceProvider()\n      )\n  );\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore(firebase);\n"],"mappings":";;;;;;;IAyCMA,CAAA,GAAqB;aACzBC,CAAA;YACAC,CAAA;aACAC,CAAA;QACAC,CAAA;eACAC,CAAA;cACAC,CAAA;qBACAC,CAAA;oBACAC,CAAA;SACAC,CAAA;yBACAC,CAAA;iBACAC,CAAA;uBACAC,CAAA;aACAC,CAAA;cACAC,CAAA;eACAC,CAAA;wBACAC;;;;;;;;;;;;;;;;;;;;;;;SCvBcC,EAAkBC,CAAA;;;;;;;;;YDkChCA,CAAA,EACAjB,CAAA;IAKCiB,CAAA,CAAgCC,QAAA,CAASC,iBAAA,CACxC,IAAIC,CAAA,CACF,aACA,UAAAH,CAAA;MACE,IAAMI,CAAA,GAAMJ,CAAA,CAAUK,WAAA,CAAY,OAAOC,YAAA;MACzC,OAAOvB,CAAA,CAAiBqB,CAAA,EAAKJ,CAAA,CAAUK,WAAA,CAAY;8BAGrDE,eAAA,CAAAC,MAAA,CAAAC,MAAA,KAAqB3B,CAAA;GC/CzB,CACEkB,CAAA,EACA,UAACA,CAAA,EAAKhB,CAAA;IACJ,WAAID,CAAA,CACFiB,CAAA,EACA,IAAII,CAAA,CAAqBJ,CAAA,EAAKhB,CAAA,GAC9B,IAAI0B,CAAA;MAGVV,CAAA,CAASW,eAAA;;AAGXZ,CAAA,CAAkBC,CAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}